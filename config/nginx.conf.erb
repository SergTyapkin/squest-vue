daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
    use epoll;
    accept_mutex on;
    worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
    gzip on;
    gzip_comp_level 2;
    gzip_min_length 512;
    gzip_proxied any; # Heroku router sends Via header

    server_tokens off;

    log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
    access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
    error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

    include mime.types;
    default_type application/octet-stream;
    sendfile on;

    # Must read the body in 5 seconds.
    client_body_timeout 5;

    # Max request size
    client_max_body_size 10M;

    upstream app_server {
        server unix:/tmp/nginx.socket fail_timeout=0;
    }

    server {
        listen <%= ENV["PORT"] %>;
        server_name _;
        keepalive_timeout 5;

        # Certbot certificates config
        server_tokens off;
        # location /.well-known/acme-challenge/ {
        #     root /var/www/certbot;
        # }
        
        # Certbot tmp challenge
        location /.well-known/acme-challenge/NcJjDSROb8kLia_FsktassOdG24pEMPiE4vN1IRkuSo {
          add_header Content-Type text/plain;
          return 200 'NcJjDSROb8kLia_FsktassOdG24pEMPiE4vN1IRkuSo.72UGjwkul-cW0NnAwsn3K_whcAxWwMTkFo-WP8kVK4Q';
        }

        # Frontend deploying
        root /app/dist;
        index index.html;

        location /api {  # proxy to API
            proxy_pass <%= ENV["API_URL"] %>;
        }
        location / {  # try files for SPA
            # Redirect to force SSL/redirect http -> https
            if ($http_x_forwarded_proto != "https") {
              return 301 https://$host$request_uri;
            }

            try_files $uri $uri/ $uri.html /index.html;
        }

        location ~* \.(?:css|js)$ {  # 1h storing on client for CSS+JS
            expires 1h;
            add_header Cache-Control "public";
        }

        location ~* \.(?:json|png|jpg|jpeg|gif|svg|ico|ttf|otf)$ {  # 7d storing on client for static images+fonts
            expires 7d;
            add_header Cache-Control "public";
        }
    }
}
